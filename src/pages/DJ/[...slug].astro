---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { fetchGraphQL } from '../../lib/api';
import '../../styles/post.css';
import GET_ALL_DJS from '../../lib/queries/getAllDJs';
import type { DJ, Post } from '../../types';

const fallbackImage = 'https://example.com/default-image.jpg';

const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/404');
}

let postsByDJ: Post[] = [];

try {
  const pageSize = 100;
  let postsAfter: string | undefined;
  let foundDJNode: DJ | null = null;

  type PageInfo = { hasNextPage?: boolean; endCursor?: string | null };

  const getPageInfo = (node: DJ | null, nodes: unknown[]): PageInfo | undefined => {
    const n = node as unknown as { posts?: { pageInfo?: PageInfo } } | undefined;
    if (n?.posts?.pageInfo) return n.posts.pageInfo;
    const first = nodes[0] as unknown as { posts?: { pageInfo?: PageInfo } } | undefined;
    return first?.posts?.pageInfo;
  };

  while (true) {
    const response = await fetchGraphQL(GET_ALL_DJS, { postsFirst: pageSize, postsAfter });

    const djNodes = response?.dJs?.nodes || [];
    if (!foundDJNode) {
      foundDJNode = djNodes.find((dj: DJ) => dj?.slug === slug) || null;
    }

    if (foundDJNode) {
      const matching = djNodes.find((dj: DJ) => dj?.slug === slug);
      if (matching?.posts?.nodes) {
        postsByDJ = postsByDJ.concat(matching.posts.nodes as Post[]);
      }
    }

    const pageInfo = getPageInfo(foundDJNode, djNodes);

    if (pageInfo?.hasNextPage) {
      postsAfter = pageInfo.endCursor ?? undefined;
      continue;
    }

    break;
  }
} catch (err) {
  console.error('Error fetching posts by DJ', err);
}

// biome-ignore lint/correctness/noUnusedVariables: Used in template
const capitaliseAndRemoveHyphens = (string: string | undefined) => {
  if (!string) return 'Unknown DJ';
  return string
    .split('-')
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};
---

<BaseLayout
  pageTitle={capitaliseAndRemoveHyphens(slug)}
  description={`All posts of DJ ${capitaliseAndRemoveHyphens(slug)}`}
  opengraphImage={postsByDJ[0]?.seo?.opengraphImage?.sourceUrl || fallbackImage}
>
  <h1>Genre: {capitaliseAndRemoveHyphens(slug)}</h1>

  {
    postsByDJ.length === 0 ? (
      <section>
        <p>
          No posts found for <strong>{capitaliseAndRemoveHyphens(slug)}</strong>.
        </p>
        <p>
          You can <a href="/">return to the homepage</a> or try a different DJ.
        </p>
      </section>
    ) : (
      <ul>
        {postsByDJ.map((post, index) => (
          <li class="genres-list">
            <div class="image-container">
              <a href={`/${post?.slug}`}>
                <img
                  src={post?.featuredImage?.node?.sourceUrl || fallbackImage}
                  srcset={post?.featuredImage?.node?.srcSet}
                  alt={post?.title.rendered || ''}
                  sizes="(max-width: 600px) 100vw, 700px"
                  width={700}
                  height={466.67}
                  class="featured-image"
                  loading={index < 2 ? 'eager' : 'lazy'}
                />
                {post?.featuredImage?.node?.caption && (
                  <figcaption set:html={post.featuredImage.node.caption} />
                )}
              </a>
            </div>
            <h2>
              <a href={`/${post?.slug}`}>{post?.title}</a>
            </h2>
            <ul class="genres">
              <li>
                {post?.genres.nodes.map((genre, index) => (
                  <span>
                    <a href={`/genre/${genre.slug}`} rel="noopener noreferrer">
                      {genre.name}
                    </a>
                    {index < post.genres.nodes.length - 1 && ', '}
                  </span>
                ))}
              </li>
            </ul>
          </li>
        ))}
      </ul>
    )
  }
</BaseLayout>
