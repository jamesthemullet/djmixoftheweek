---
import BaseLayout from '../layouts/BaseLayout.astro';
import { Image } from 'astro:assets';
import '../styles/post.css';
import Comments from '../components/comments.astro';
import type { Comments as CommentsType } from '../types';

const fallbackImage = 'https://example.com/default-image.jpg';

export async function getStaticPaths() {
  const allPosts = [];
  let hasNextPage = true;
  let endCursor = null;

  while (hasNextPage) {
    const response: Response = await fetch('https://blog.djmixoftheweek.com/graphql', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        query: `
          query AllSlugs($first: Int!, $after: String) {
            posts(first: $first, after: $after) {
              nodes {
                slug
              }
              pageInfo {
                hasNextPage
                endCursor
              }
            }
          }
        `,
        variables: {
          first: 100,
          after: endCursor,
        },
      }),
    });

    const { data } = await response.json();
    const posts = data.posts.nodes;
    allPosts.push(...posts);

    hasNextPage = data.posts.pageInfo.hasNextPage;
    endCursor = data.posts.pageInfo.endCursor;
  }

  const paths = allPosts.map((post) => ({
    params: { slug: post.slug },
  }));

  return paths;
}

const { slug } = Astro.params;

const singleResponse = await fetch('https://blog.djmixoftheweek.com/graphql', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    query: `
        query SinglePost($id: ID = "${slug}") {
          post(idType: SLUG, id: $id) {
            date
            content
            title
            postId
            featuredImage {
              node {
                sourceUrl
                caption
              }
            }
            comments(where: { order: ASC }) {
              nodes {
                id
                content
                parentId
                author {
                  node {
                    name
                  }
                }
                date
              }
            }
            seo {
              opengraphTitle
              opengraphDescription
              opengraphSiteName
              opengraphImage {
                uri
                altText
                mediaDetails {
                  file
                  height
                  width
                }
                mediaItemUrl
                sourceUrl
                srcSet
              }
            }
            mixcloud {
              mixcloud
            }
            soundcloud {
              soundcloud
            }
          }
        }
        `,
  }),
});

const { data } = await singleResponse.json();

const singlePost = data.post;

const organiseComments = (comments: CommentsType) => {
  const commentMap = new Map();

  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    comment.replies = [];
    commentMap.set(comment.id, comment);
  });

  const topLevelComments: CommentsType = [];
  // biome-ignore lint/complexity/noForEach: <explanation>
  comments?.forEach((comment) => {
    if (comment.parentId) {
      const parent = commentMap.get(comment.parentId);
      if (parent) {
        parent.replies.push(comment);
      }
    } else {
      topLevelComments.push(comment);
    }
  });

  return topLevelComments;
};

const threadedComments = organiseComments(data.post.comments.nodes);

const formattedDate = new Date(singlePost.date).toLocaleDateString('en-GB', {
  day: '2-digit',
  month: '2-digit',
  year: 'numeric',
});
---

<BaseLayout
  pageTitle={singlePost.title}
  description={singlePost.seo.opengraphDescription}
  opengraphImage={singlePost?.seo?.opengraphImage?.sourceUrl || fallbackImage}
>
  <div class="image-container">
    <img
      src={singlePost.featuredImage.node.sourceUrl}
      alt={singlePost.title}
      srcset={singlePost.seo.opengraphImage.srcSet}
      sizes="100vw"
      width={singlePost.seo.opengraphImage.mediaDetails.width}
      height={singlePost.seo.opengraphImage.mediaDetails.height}
      class="featured-image"
      loading="eager"
      fetchpriority="high"
    />

    {
      singlePost?.featuredImage?.node?.caption && (
        <figcaption set:html={singlePost.featuredImage.node.caption} />
      )
    }
  </div>
  <article class="container">
    <h2>{singlePost.title}</h2>
    <date>
      Posted: {formattedDate}
    </date>
    <div set:html={singlePost.content} />
    <div set:html={singlePost.soundcloud.soundcloud} />
    <br />
    <div set:html={singlePost.mixcloud.mixcloud} />
    <Comments threadedComments={threadedComments} postId={singlePost.postId} />
  </article>
</BaseLayout>
