---
import { Image } from "astro:assets";
import BaseLayout from "../layouts/BaseLayout.astro";
import "../styles/post.css";
import Comments from "../components/comments.astro";
import type { Comments as CommentsType } from "../types";

const fallbackImage = "https://example.com/default-image.jpg";

const { slug } = Astro.params;

if (!slug) {
	return Astro.redirect("/404");
}

const singleResponse = await fetch("https://blog.djmixoftheweek.com/graphql", {
	method: "POST",
	headers: { "Content-Type": "application/json" },
	body: JSON.stringify({
		query: `
        query SinglePost($id: ID = "${slug}") {
          post(idType: SLUG, id: $id) {
            date
            content
            title
            postId
            featuredImage {
              node {
                sourceUrl
                caption
              }
            }
            comments(where: { order: ASC }) {
              nodes {
                id
                content
                parentId
                author {
                  node {
                    name
                  }
                }
                date
              }
            }
            seo {
              opengraphTitle
              opengraphDescription
              opengraphSiteName
              opengraphImage {
                uri
                altText
                mediaDetails {
                  file
                  height
                  width
                }
                mediaItemUrl
                sourceUrl
                srcSet
              }
            }
            mixcloud {
              mixcloud
            }
            soundcloud {
              soundcloud
            }
          }
        }
        `,
	}),
});

const { data } = await singleResponse.json();

const singlePost = data?.post;

// Handle case where post is not found
if (!singlePost) {
	return Astro.redirect("/404");
}

const organiseComments = (comments: CommentsType) => {
	const commentMap = new Map();

	// biome-ignore lint/complexity/noForEach: false positive
	comments?.forEach((comment) => {
		comment.replies = [];
		commentMap.set(comment.id, comment);
	});

	const topLevelComments: CommentsType = [];
	// biome-ignore lint/complexity/noForEach: false positive
	comments?.forEach((comment) => {
		if (comment.parentId) {
			const parent = commentMap.get(comment.parentId);
			if (parent) {
				parent.replies.push(comment);
			}
		} else {
			topLevelComments.push(comment);
		}
	});

	return topLevelComments;
};

const threadedComments = organiseComments(singlePost.comments?.nodes || []);

const formattedDate = new Date(singlePost.date).toLocaleDateString("en-GB", {
	day: "2-digit",
	month: "2-digit",
	year: "numeric",
});
---

<BaseLayout
  pageTitle={singlePost.title}
  description={singlePost.seo.opengraphDescription}
  opengraphImage={singlePost?.seo?.opengraphImage?.sourceUrl || fallbackImage}
>
  <div class="image-container">
    <img
      src={singlePost.featuredImage.node.sourceUrl}
      alt={singlePost.title}
      srcset={singlePost.seo.opengraphImage.srcSet}
      sizes="100vw"
      width={singlePost.seo.opengraphImage.mediaDetails.width}
      height={singlePost.seo.opengraphImage.mediaDetails.height}
      class="featured-image"
      loading="eager"
      fetchpriority="high"
    />

    {
      singlePost?.featuredImage?.node?.caption && (
        <figcaption set:html={singlePost.featuredImage.node.caption} />
      )
    }
  </div>
  <article class="container">
    <h2>{singlePost.title}</h2>
    <date>
      Posted: {formattedDate}
    </date>
    <div set:html={singlePost.content} />
    <div set:html={singlePost.soundcloud.soundcloud} />
    <br />
    <div set:html={singlePost.mixcloud.mixcloud} />
    <Comments threadedComments={threadedComments} postId={singlePost.postId} />
  </article>
</BaseLayout>
