---
import { Image } from 'astro:assets';
// import logo3 from "../../images/logos/rdaw-logo-3.webp";
import './header.css';
import he from 'he';
import type { PopularPost } from '../../types';
import Search from '../search/search.astro';

let popularPosts: PopularPost[] = [];

try {
  const response = await fetch('https://blog.djmixoftheweek.com/wp-json/top-10/v1/popular-posts');
  if (!response.ok) throw new Error(`Failed to fetch: ${response.status}`);
  popularPosts = await response.json();
} catch (error) {
  console.error('Error fetching top posts:', error);
}

const currentUrl = Astro.site || 'http://localhost:4321';

const decodeHtmlEntities = (text: string) => {
  return he.decode(text);
};
---

<header>
  <div class="nav-container">
    <!-- <a class="logo" href="/"><Image src={logo3} alt="A bird." width="100" height="100" /></a> -->
    <h1 class="sr-only">DJ Mix Of The Week</h1>
    <div class="title">
      <a href="/">DJ Mix Of The Week</a>
    </div>
    <button id="nav-toggle" aria-label="Toggle Navigation Menu"><span></span></button>

    <nav id="nav-menu">
      <a href="/">Home</a>
      <a href="/about">About</a>
      <a href="/league-of-mixes">League Of Mixes</a>
      <a href="/genres">Posts By Genre</a>
    </nav>
    <section class="header-block search">
      <h2>Search:</h2>
      <Search />
    </section>
    {
      popularPosts && (
        <div class="header-block popular-mixes">
          <h2>Popular Mixes:</h2>
          <ul>
            {popularPosts.map((post) => (
              <li>
                {post?.title.rendered && (
                  <a href={`${currentUrl}${post?.slug}`}>
                    {decodeHtmlEntities(post?.title.rendered)} ({post?.visits})
                  </a>
                )}
              </li>
            ))}
          </ul>
        </div>
      )
    }
    <section class="header-block subscribe">
      <h2>Be notified of new posts by e-mail</h2>
      <p>
        Please note that this feature is experimental - if you sign up you will also receive test
        messages until I'm satisfied it is working!
      </p>
      <form id="subscribe-form">
        <label> Name: </label>
        <input autocomplete="name" type="text" id="name" required />
        <label> Email: </label>
        <input autocomplete="email" type="email" id="email" required />
        <button type="submit">Subscribe</button>
      </form>
      <p class="response" id="response-message"></p>
    </section>
  </div>

  <script>
    const navToggle = document.getElementById('nav-toggle') as HTMLElement;
    const navMenu = document.getElementById('nav-menu') as HTMLElement;

    navToggle.addEventListener('click', function () {
      this.classList.toggle('open');

      if (navMenu.style.maxHeight) {
        navMenu.style.maxHeight = '';
      } else {
        navMenu.style.maxHeight = navMenu.scrollHeight + 'px';
      }
    });

    const form = document.getElementById('subscribe-form');
    const responseMessage = document.getElementById('response-message')!;

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const name = (document.getElementById('name') as HTMLInputElement).value;
      const email = (document.getElementById('email') as HTMLInputElement).value;

      console.log(10, 'Form submitted:', { name, email });

      const res = await fetch('https://blog.djmixoftheweek.com/wp-json/custom/v1/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, name }),
      });

      const data = await res.json();

      if (res.ok) {
        responseMessage.textContent = data.message;
      } else {
        responseMessage.textContent = `Error: ${data.message || 'Something went wrong'}`;
      }
    });
  </script>
</header>
