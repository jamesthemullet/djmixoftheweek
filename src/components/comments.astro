---
export interface Comment {
  id: string;
  content: string;
  parentId: string | null;
  author: {
    node: {
      name: string;
    };
  };
  date: string;
}

interface Props {
  threadedComments: Comment[];
  postId: string;
}

import "../styles/index.css";
import "../styles/comments.css";

const { threadedComments, postId } = Astro.props as Props;

const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "long",
    day: "numeric",
  };
  const formattedDate = date.toLocaleDateString("en-US", options);

  const day = date.getDate();
  const ordinalSuffix = (day: number) => {
    if (day > 3 && day < 21) return "th";
    switch (day % 10) {
      case 1:
        return "st";
      case 2:
        return "nd";
      case 3:
        return "rd";
      default:
        return "th";
    }
  };

  const formattedTime = date.toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "numeric",
    hour12: true,
  });

  return `${formattedDate.replace(/\d+/, day + ordinalSuffix(day))} at ${formattedTime}`;
};
---

<section class="comments-block">
  <h2>Any comments?</h2>

  {
    threadedComments.length > 0 ? (
      <ul class="comments-list">
        {threadedComments.map((comment) => (
          <li class="comment">
            <p>
              By <strong>{comment.author.node.name}</strong> on{" "}
              {formatDate(comment.date)}:
            </p>
            <p set:html={comment.content} />

            {comment.replies && comment.replies.length > 0 ? (
              <ul class="comment-replies">
                {comment.replies.map((reply) => (
                  <li class="comment-reply">
                    <p>
                      By <strong>{reply.author.node.name}</strong> on{" "}
                      {formatDate(reply.date)}:
                    </p>
                    <p set:html={reply.content} />
                  </li>
                ))}
              </ul>
            ) : null}
          </li>
        ))}
      </ul>
    ) : (
      <p>No comments yet. Be the first to comment!</p>
    )
  }

  <form id="comment-form" class="comment-form" data-post-id={postId}>
    <div>
      <label for="authorName">Name:</label>
      <input type="text" id="authorName" required />
    </div>
    <div>
      <label for="email">Email:</label>
      <input type="email" id="email" required />
    </div><div>
      <label for="commentText">Comment:</label>
      <textarea id="commentText" required></textarea>
    </div>
    <button type="submit">Post Comment</button>
    <p id="message"></p>
  </form>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("comment-form");
    const message = document.getElementById("message");

    form?.addEventListener("submit", async (event) => {
      event.preventDefault();

      const authorName = (
        document.getElementById("authorName") as HTMLInputElement
      )?.value;
      const email = (document.getElementById("email") as HTMLInputElement)
        ?.value;
      const commentText = (
        document.getElementById("commentText") as HTMLTextAreaElement
      )?.value;

      const postId = form?.getAttribute("data-post-id");

      const response = await fetch("https://blog.djmixoftheweek.com/graphql", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          query: `mutation AddComment($input: CreateCommentInput!) {
            createComment(input: $input) {
              success
            }
          }`,
          variables: {
            input: {
              author: authorName,
              authorEmail: email,
              content: commentText,
              commentOn: parseInt(postId, 10),
            },
          },
        }),
      });

      const data = await response.json();
      if (data.errors) {
        message.textContent = "Failed to submit comment.";
        message.style.color = "red";
      } else {
        message.textContent = "Comment submitted! Awaiting moderation.";
        message.style.color = "green";
        form.reset();
      }
    });
  });
</script>
